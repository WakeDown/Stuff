@using Stuff.Objects
@model Stuff.Models.RecruitVacancy

@{
    ViewBag.Title = "Вакансия №" + Model.Id;
    Layout = "~/Views/Shared/_Editor.cshtml";
}

@section PanelHead
{
    Вакансия №@Model.Id


    @if (ViewBag.CurUser.HasAccess(AdGroup.RecruitManager) && Model.StateIsActive)
    {
        <button id="delete" class="btn btn-danger btn-xs pull-right"><i class="fa fa-trash"></i> удалить</button>
        <button id="change" class="btn btn-warning btn-xs pull-right"><i class="fa fa-edit"></i> изменить</button>
    }
}

@section PanelBody
{
    <div class="row">
        <div class="col-lg-8">
            <div id="vacancyInfo">
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Город:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm bold">@Html.LabelFor(m => m, Model.CityName)</div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Подразделение:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm bold">@Html.LabelFor(m => m, Model.DepartmentName)</div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Должность:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">@Html.LabelFor(m => m, Model.PositionName)</div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Руководитель:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">@Html.LabelFor(m => m, Model.ChiefName)</div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Руководитель принимающий решение:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">@Html.LabelFor(m => m, Model.MatcherName)</div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Менеджер по персоналу:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm" id="personalManagerContainer">
                        @Html.LabelFor(m => m, Model.PersonalManagerName)
                    </div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Автор заявки:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">@Html.LabelFor(m => m, Model.AuthorName)</div>
                </div>
                @*<div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Дата окончания План:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">
                        <label>@Model.DeadlineDate.ToString("dd.MM.yyyy")</label>
                    </div>
                </div>*@
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Дата окончания Регламент:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">
                        <label>@(Model.OrderEndDate.HasValue ? Model.OrderEndDate.Value.ToString("dd.MM.yyyy") : "не указана")</label>
                    </div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Дата окончания Заявка:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">
                        <label>@(Model.ClaimEndDate.HasValue ? Model.ClaimEndDate.Value.ToString("dd.MM.yyyy") : "не указана")</label>
                    </div>
                </div>
                <div class="row pad-t-sm-sm">
                    <div class="col-lg-4 col-sm-12 text-center-sm text-right-lg">Причина возникновения:</div>
                    <div class="col-lg-8 col-sm-12 text-center-sm">@Html.LabelFor(m => m, Model.CauseName)</div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4 class="nomargin">
                        История
                    </h4>
                </div>
                <div class="panel-body" id="history">
                </div>
            </div>
        </div>
    </div>
    <p>
        <h4>
            Список кандидатов <span id="candidatesCount" class="badge badge-info"></span>
            @if (Model.StateIsActive)
            {
                <button id="addCandidate" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#candidateListModal"><i class="fa fa-plus-circle"></i> добавить из списка</button>
                <a href="@Url.Action("CandidateNew")?vid=@Model.Id&returnUrl=@Request.Url" class="btn btn-primary btn-sm"><i class="fa fa-plus-circle"></i> новый кандидат</a>
            }
        </h4>

        <div id="candidatesList"></div>
    </p>

    

    <!-- Modal -->
    <div id="candidateStateResultModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Укажите результат</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-4">
                            <textarea id="stateComment" class="form-control" placeholder="Комментарий" rows="9"></textarea>
                        </div>
                        <div class="col-lg-4">
                            <button id="selectionSetNextState" class="btn btn-success btn-block">Перевести на следущюий этап</button>
                            <button id="selectionSetCurrentState" class="btn btn-warning btn-block">Оставить на текущем этапе</button>
                            <button id="selectionSetCancelState" class="btn btn-danger btn-block">Непригоден для вакансии</button>
                            <button type="button" class="btn btn-default btn-block" data-dismiss="modal">Отмена</button>
                            <button id="selectionSetAcceptState" class="btn btn-primary btn-block">Утвердить кандидата</button>
                        </div>
                        <div class="col-lg-4">
                            <div id="candidateStateResultHistory"></div>
                        </div>
                    </div>
                </div>
                @*<div class="modal-footer">

                    </div>*@
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div id="selectionHistoryModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">История кандидата для вакансии №@Model.Id</h4>
                    <div>@Model.CityName<br/>@Model.PositionName<br/><small>@Model.DepartmentName</small>
                    </div>
                    <div>Кандидат - <strong id="historyCandidateName"></strong>
                    </div>
                </div>
                <div class="modal-body">
                    <p id="selectionHistoryList"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div id="candidateListModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    @*<button type="button" class="close" data-dismiss="modal">&times;</button>*@
                    <div>
                        <h4 class="modal-title">
                            Список кандидатов - всего <span id="candidatesSelectionTotalCount" class="badge"></span>
                            <button type="button" class="btn btn-default pull-right" data-dismiss="modal">Отмена</button>
                            <button name="addSelectedCandidates" class="btn btn-success pull-right">Добавить выбранные <span name="selectedCandidatesSelection" class="badge"></span></button>
                        </h4>
                    </div>
                </div>
                <div class="modal-body">
                    <p id="candidateList"></p>
                </div>
                <div class="modal-footer">
                    <button name="addSelectedCandidates" class="btn btn-success">Добавить выбранные <span name="selectedCandidatesSelection" class="badge"></span></button>
                    <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
<div id="vacancyChangeListModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                @*<button type="button" class="close" data-dismiss="modal">&times;</button>*@
                <div>
                    <h4 class="modal-title">
                        Список вакансий - всего <span id="vacancySelectionTotalCount" class="badge"></span>
                        <button type="button" class="btn btn-default pull-right" data-dismiss="modal">Отмена</button>
                        <button name="addSelectedVacancies" class="btn btn-success pull-right">Перенести кандидата на отмеченные <span name="selectedVacanciesSelection" class="badge"></span></button>
                    </h4>
                    <div>Кандидат - <strong id="vacancyChangeCandidateName"></strong></div>
                </div>
            </div>
            <div class="modal-body">
                <p id="vacancyChangeList"></p>
            </div>
            <div class="modal-footer">
                <button name="addSelectedVacancies" class="btn btn-success">Перенести кандидата на отмеченные <span name="selectedVacanciesSelection" class="badge"></span></button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
            </div>
        </div>
    </div>
</div>
}

@section scripts
{
    <script type="text/javascript">
        function loadVacancySelectionList() {
            var $cont = $('#vacancyChangeList');
            var slid = $('#vacancyChangeListModal').attr('slid');
            //var curvid =  $('#vacancyChangeListModal').attr('curvid');
            $.ajax({ url: '@Url.Action("VacancySelection")', method: 'GET', success: function(html) { $cont.html(html); } });
            $('[name="addSelectedVacancies"]').click(function() {
                var $this = $(this);
                showSpinnerAppendAndDisable($this);
                @*переменная selectedCandidateResume находится в view CandidatesSelection*@
                $.ajax({
                    url: '@Url.Action("ChangeVacancy4Candidate")',
                    method: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    data: JSON.stringify({ idSelection: slid, idVacancies: selectedVacancies }),
                    success: function() {
                        loadCandidatesList();
                        selectedVacancies = [];
                        hideSpinnerAndEnabled($this);
                    },
                    error:
                        function() {
                            alert('Ошибка при добавлении списка кандидатов к вакансии! Восможно данные не были сохранены!');
                            loadCandidatesList();
                            selectedVacancies = [];
                            hideSpinnerAndEnabled($this);
                        }
                });
                $('#vacancyChangeListModal').modal('hide');
            });
        }

        function loadCandidateSelectionList() {
            var $cont = $('#candidateList');
            $.ajax({ url: '@Url.Action("CandidatesSelection")', method: 'GET', success: function(html) { $cont.html(html); } });
            $('[name="addSelectedCandidates"]').click(function() {
                var $this = $(this);
                showSpinnerAppendAndDisable($this);
                @*переменная selectedCandidateResume находится в view CandidatesSelection*@
                $.ajax({
                    url: '@Url.Action("AppendCandidates2Vacancy")',
                    method: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    data: JSON.stringify({ idVacancy: @Model.Id, idCandidates: selectedCandidateResume }),
                    success: function() {
                        loadCandidatesList();
                        selectedCandidateResume = [];
                        hideSpinnerAndEnabled($this);
                    },
                    error:
                        function() {
                            alert('Ошибка при добавлении списка кандидатов к вакансии! Восможно данные не были сохранены!');
                            loadCandidatesList();
                            selectedCandidateResume = [];
                            hideSpinnerAndEnabled($this);
                        }
                });
                $('#candidateListModal').modal('hide');
            });
        }

        function loadCandidatesList() {
            var $cont = $('#candidatesList');
            var $candidatesCount = $('#candidatesCount');
            $cont.empty();
            $candidatesCount.empty();
            $.ajax({
                url: '@Url.Action("GetVacancyCandadateList")',
                method: 'POST',
                data: { id: @Model.Id },
                success: function(data) {
                    $cont.empty();
                    $candidatesCount.text(data.totalCount);
                    var $table = $('<table id="tblVacancyCandidateList" class="table table-bordered table-striped table-hover"></table>');
                    $table.append('<thead><tr class="bg-primary">' +
                        '<th class="min-width text-nowrap">ID</th>' +
                        '<th>ФИО</th>' +
                        '<th>Пол</th>' +
                        '<th>Возраст</th>' +
                        '<th>Телефон</th>' +
                        '<th>E-mail</th>' +
                        '<th>Статус</th>' +
                        '<th class="min-width"></th>' +
                        '</tr></thead>');
                    $cont.append($table);
                    if (data.list.length > 0) {
                        for (var i = 0; i < data.list.length; i++) {
                            var item = data.list[i];
                            $table.append(getCandidateListRow(item));
                        }
                        //$table.tablesorter({
                        //    sortList: [[1,1]],
                        //    headers: { 7: { sorter: false} }
                        //});

                    } else {
                        $table.append('<tr><td>пусто</td></tr>');
                    }

                    $('#selectionSetNextState').click(selectionSetNextState);
                    $('#selectionSetCancelState').click(selectionSetCancelState);
                    $('#selectionSetAcceptState').click(selectionSetAcceptState);
                    $('#selectionSetCurrentState').click(selectionSetCurrentState);
                },
                error: function() {
                    alert('Ошибка при загрузке списка кандидатов');
                }
            });
        }

        function showSelectionHistory() {
            var $this = $(this);
            var id = $this.attr('slid');
            var cname = $this.attr('cname');
            $('#selectionHistoryModal').modal('show');
            var $cont = $('#selectionHistoryList');
            $cont.empty();
            $('#historyCandidateName').text('');
            $('#historyCandidateName').text(cname);
            $.ajax({
                url: '@Url.Action("SelectionHistory")?id=' + id,
                mode: 'GET',
                success: function(html) {
                    $cont.html(html);
                },
                error: function() {
                    alert('Ошибка при загрузке истории!');
                }
            });
        }

        function getCandidateListRow(item) {
            var $row = $('<tr id="sel-' + item.Id + '" slid="' + item.Id + '" class="' + (item.StateIsAccept == true ? ' selected' : '') + '">' +
                '<th>' + item.Candidate.Id + '</th>' +
                '<td><a target="_blank" href="@Url.Action("CandidateCard")?id=' + item.Candidate.Id + '">' + item.Candidate.Surname + ' ' + item.Candidate.Name + ' ' + (item.Candidate.Patronymic == null? '' : item.Candidate.Patronymic)  + '</a>' + 
                (item.CameTypeName == null ? '' : '<br /><small>' + item.CameTypeName +'</small>') 
                +
                (item.Candidate.FileSid == null || item.Candidate.FileSid == '' ? '' : '<br /><a class="text-danger btn-sm" href="@Url.Action("GetCandidateFile")?sid=' + item.Candidate.FileSid + '" target="_blank">файл резюме</a>') +
                '</td>' +
                '<td>' + (item.Candidate.MaleStr == null? '' : item.Candidate.MaleStr) + '</td>' +
                '<td>' + (item.Candidate.Age == null? '' : item.Candidate.Age) + '</td>' +
                '<td>' + (item.Candidate.Phone == null? '' : item.Candidate.Phone) + '</td>' +
                '<td>' + (item.Candidate.Email == null? '' : item.Candidate.Email) + '</td>' +
                '<td><strong>' + item.StateName + '</strong>' +
                '<button name="sel-history" slid="' + item.Id + '" cname="' + item.Candidate.DisplayName + '" class="btn btn-link pull-right">показать историю</button>' +
                '<br /><small>' + item.StateChangeDateStr + ' - ' + item.StateChangerName + '</small><br /><small>' + (item.StateDescr != null ? item.StateDescr : '') + '</small></td>' +
                '<td>' + (item.IdNextState != null && item.IdNextState > 0 && item.ShowNextStateButton == true ?
                    '<button name="selectionSetState" nstnm="' + item.NextStateButtonName + '" cstid="' + item.IdState + '" slid="' + item.Id + '" nstid="' + item.IdNextState + '" class="btn btn-warning btn-sm btn-block">Изменить статус</button>' +
                    '<button name="changeVac" slid="' + item.Id + '" curvid="@Model.Id" class="btn btn-danger btn-sm btn-block" cname="' + item.Candidate.DisplayName + '">На другую вакансию</button>' : '') +
                '</td>' +
                '</tr>');

            $('[name="sel-history"]', $row).click(showSelectionHistory);

            $row.find('[name="changeVac"]').click(function() {
                var $this = $(this);
                var slid = $this.attr('slid');
                var cname = $this.attr('cname');
                var curvid = $this.attr('curvid');
                $('#vacancyChangeCandidateName').text('');
                $('#vacancyChangeCandidateName').text(cname);

                var $modal = $('#vacancyChangeListModal');
                $modal.attr('slid', slid);
                $modal.attr('curvid', curvid);
                $modal.modal('show');
            });

            $('[name="selectionSetState"]', $row).click(function() {
                var $this = $(this);
                var slid = $this.attr('slid');
                var nstid = $this.attr('nstid');
                var cstid = $this.attr('cstid');
                var nstnm = $this.attr('nstnm');
                var $modal = $('#candidateStateResultModal');
                $modal.attr('slid', slid);
                $modal.attr('nstid', nstid);
                $modal.attr('cstid', cstid);
                $('#selectionSetNextState').text(nstnm);
                $modal.modal('show');
            });
            return $row;
        }

        function selectionSetCurrentState(e) {

            e.stopPropagation();
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            var $modal = $('#candidateStateResultModal');
            var slid = $modal.attr('slid');
            var cstid = $modal.attr('cstid');
            var descr = $('#stateComment').val();
            if (descr == null || descr == '') {
                alert('Укажите причину!');
                $('#stateComment').focus();
                return;
            }

            $.ajax({
                url: '@Url.Action("SelectionSetNextState")',
                method: 'POST',
                data: { id: slid, idState: cstid, descr: descr },
                success: function(data) {
                    var $row = $('#sel-' + slid);
                    $row.replaceWith(getCandidateListRow(data));
                    $modal.modal('hide');
                    hideSpinnerAndEnabled($this);
                },
                error: function() {
                    alert('Ошибка при именении статуса кандидата! Возможно изменения не были сохранены!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function selectionSetAcceptState(e) {
            e.stopPropagation();
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            var $modal = $('#candidateStateResultModal');
            var slid = $modal.attr('slid');
            var descr = $('#stateComment').val();

            if (!confirm('После утверждения кандидата остальным кандидатам будет присвоен статус Отклонено и вакансия будет переведена в статус Завершено! Вы уверены что хотите принять утвердить данного кандидата?')) return;


            $.ajax({
                url: '@Url.Action("SelectionSetAcceptState")',
                method: 'POST',
                data: { id: slid, descr: descr },
                success: function(data) {
                    window.location.reload();
                    //var $row = $('#sel-' + slid);
                    //$row.replaceWith(getCandidateListRow(data));
                    //$modal.modal('hide');

                },
                error: function() {
                    alert('Ошибка при именении статуса кандидата! Возможно изменения не были сохранены!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function selectionSetCancelState(e) {
            e.stopPropagation();
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            var $modal = $('#candidateStateResultModal');
            var slid = $modal.attr('slid');
            var descr = $('#stateComment').val();

            if (descr == null || descr == '') {
                alert('Укажите причину отклонения!');
                $('#stateComment').focus();
                return;
            }

            $.ajax({
                url: '@Url.Action("SelectionSetCancelState")',
                method: 'POST',
                data: { id: slid, descr: descr },
                success: function(data) {
                    var $row = $('#sel-' + slid);
                    $row.replaceWith(getCandidateListRow(data));
                    $modal.modal('hide');
                    hideSpinnerAndEnabled($this);
                },
                error: function() {
                    alert('Ошибка при именении статуса кандидата! Возможно изменения не были сохранены!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function selectionSetNextState(e) {
            e.stopPropagation();
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            var $modal = $('#candidateStateResultModal');
            var slid = $modal.attr('slid');
            var nstid = $modal.attr('nstid');
            var descr = $('#stateComment').val();

            $.ajax({
                url: '@Url.Action("SelectionSetNextState")',
                method: 'POST',
                data: { id: slid, idState: nstid, descr: descr },
                success: function(data) {
                    if (data.StateIsAccept != true) {
                        var $row = $('#sel-' + slid);
                        $row.replaceWith(getCandidateListRow(data));
                        $modal.modal('hide');
                        hideSpinnerAndEnabled($this);
                    } else {
                        window.location.reload();
                    }
                },
                error: function() {
                    alert('Ошибка при именении статуса кандидата! Возможно изменения не были сохранены!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function loadHistory() {
            var $cont = $('#history');

            $.ajax({
                url: '@Url.Action("GetVacancyHistory")',
                method: 'POST',
                data: { id: @Model.Id, full: false },
                success: function(data) {
                    $cont.empty();

                    if (data.list.length > 0) {
                        for (var i = 0; i < data.list.length; i++) {
                            var item = data.list[i];
                            var cell = '<div class="history-item"><strong>' + item.StateName + '</strong><br /><small>' + item.DateCreateStr + ' - ' + item.CreatorName + '</small></div>';
                            $cont.append(cell);

                        }

                        if (data.totalCount > data.list.length) {
                            $cont.append('<button id="historyMore" class="btn btn-default btn-xs">еще...(' + (data.totalCount - data.list.length) + ')</button>');
                            $('#historyMore').click(function() {
                                $.ajax({
                                    url: '@Url.Action("GetVacancyHistory")',
                                    method: 'POST',
                                    data: { id: @Model.Id, full: true },
                                    success: function(data) {
                                        $cont.empty();
                                        if (data.list.length > 0) {
                                            for (var i = 0; i <= data.list.length; i++) {
                                                var item = data.list[i];
                                                var cell = '<div class="history-item"><strong>' + item.StateName + '</strong><br /><small>' + item.DateCreateStr + ' - ' + item.CreatorName + '</small></div>';
                                                $cont.append(cell);
                                            }
                                        }

                                    },
                                    error: function() {
                                        alert('Ошибка при загрузке истории!');
                                    }
                                });
                            });
                        }
                    }

                },
                error: function() {
                    alert('Ошибка при загрузке истории!');
                }
            });
        }

        function loadCandidateStateResultHistory() {
            var $this = $(this);
            var $modal = $('#candidateStateResultModal');
            var slid = $modal.attr('slid');
            var $cont = $('#candidateStateResultHistory');
            $cont.empty();
            $.ajax({
                url: '@Url.Action("SelectionTinyHistory")?id=' + slid,
                mode: 'GET',
                success: function(html) {
                    $cont.html(html);
                },
                error: function() {
                    alert('Ошибка при загрузке истории!');
                }
            });
        }

        $(function() {
            loadHistory();
            loadCandidatesList();

            $('#vacancyChangeListModal').on('shown.bs.modal', function() {
                loadVacancySelectionList();
            });

            $('#candidateListModal').on('shown.bs.modal', function() {
                loadCandidateSelectionList();
            });

            $('#candidateStateResultModal').on('shown.bs.modal', function() {
                $('#stateComment').val('');
                loadCandidateStateResultHistory();
            });

            $('#change').click(function() {
                var $this = $(this);
                showSpinnerAppendAndDisable($this);
                var $btnChange = $('#change');
                var $btnSave = $('<button id="save" class="btn btn-success btn-sm pull-right"><i class="fa fa-save"></i> сохранить</button>');
                $btnSave.click(saveVacancy);
                $btnChange.replaceWith($btnSave);

                var $cont = $('#personalManagerContainer');
                $.ajax({
                    url: '@Url.Action("GetPersonalManagerList")',
                    method: 'POST',
                    success: function(data) {
                        if (data.length > 0) {
                            $cont.empty();
                            var $select = $('<select id="personalManager" class="input-sm form-control"></select>');
                            $cont.append($select);
                            var optionNull = '<option value="">--выберите--</option>';
                            $select.append(optionNull);
                            for (var i = 0; i <= data.length; i++) {
                                var item = data[i];
                                var option = '<option value="' + item.Key + '">' + item.Value + '</option>';
                                $select.append(option);
                            }
                            $select.val('@Model.PersonalManagerSid');
                        }
                    },
                    error: function() {
                        alert('Ошибка при редактировании!');
                    }
                });
            });

            $('#delete').click(function() {
                var $this = $(this);
                showSpinnerAppendAndDisable($this);
                if (!confirm('Вы уверены что хотите удалить вакансию?')) return;
                $.ajax({
                    url: '@Url.Action("VacancyDelete")',
                    method: 'POST',
                    data: { id: @Model.Id },
                    success: function() {
                        window.location = '@Url.Action("Index")';
                    },
                    error: function() {
                        alert('Ошибка при удалении. Удаление не выполнено!');
                        hideSpinnerAndEnabled($this);
                    }
                });
            });


        });

        function saveVacancy() {
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            var pesrManager = $('#personalManager').val();
            $.ajax({
                url: '@Url.Action("ChangeVacancy")',
                method: 'POST',
                data: { id: @Model.Id, personalManagerSid: pesrManager },
                success: function() {
                    window.location.reload();
                },
                error: function() {
                    alert('Ошибка при сохранении. Возможно данные не были сохранены!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }
    </script>
}
);